#!/usr/bin/env node
'use strict';

const yargs = require('yargs');
const fs = require('fs');
const path = require('path-extra');
const srt2vtt = require('srt-to-vtt');
const vtt2srt = require('vtt-to-srt');
const webvtt = require('node-webvtt');
const invariant = require('tiny-invariant');
const { existsSync, existsDirSync, existsFileSync } = require('../src/util');
const log = require('../src/logger');
const { puppyTrans } = require('../src/puppy');
const { googleAPITrans, googleAPIkeySetupValidation } = require('../src/googleV3');

// prevent warnning
process.setMaxListeners(0);

yargs
  .usage('Usage: $0 <command> [options]')
  .command(
    'translate-api <src> [dest]',
    'Translate source path SRT|VTT to VTT dest path using Google API v3 [Registration required]',
    () => {},
    async (argv) => {
      googleAPIkeySetupValidation(argv.key);
      handler(argv, {
        file: (arg) => translateFile(arg, googleAPITrans),
        dir: (arg) => translateDir(arg, googleAPITrans),
      });
    }
  )
  .command(
    'translate <src> [dest]',
    false,
    () => {},
    async (argv) => {
      // set a true|false ENV var
      process.env.USE_PROXY = argv.proxy;
      process.env.USE_MULTI_TAB = argv.multi;
      handler(argv, {
        file: (arg) => translateFile(arg, puppyTrans),
        dir: (arg) => translateDir(arg, puppyTrans),
      });
    }
  )
  .command(
    'convert <src> [dest]',
    'Convert only source path SRT to VTT dest path',
    () => {},
    (argv) => handler(argv, { file: convertFile, dir: convertDir })
  )
  .command(
    'convert-srt <src> [dest]',
    'Convert only source path VTT to SRT dest path',
    () => {},
    (argv) => handler(argv, { file: convertFileVTT, dir: convertDirVTT })
  )
  .option('key', {
    describe: 'Path to Google private key JSON',
  })
  .option('slang', {
    alias: 's',
    describe: 'Current lang of the file',
    default: 'en',
  })
  .option('tlang', {
    alias: 't',
    describe: 'Target lang of the file',
    default: 'es',
  })
  .option('depth', {
    describe: "Depth folder recursion. Disable with '--no-depth'",
    default: true,
  })
  .option('purge', {
    describe: 'Purge original file',
    default: false,
    type: 'boolean',
  })
  .option('out', {
    describe: 'Output to folder',
    type: 'string',
  })
  .option('force', {
    describe: 'Force overwrite existing file',
    default: false,
    type: 'boolean',
  })
  .option('skip', {
    describe: 'Skip if already .LANG.vtt file exists',
    default: true,
    type: 'boolean',
  })
  .option('proxy', {
    describe: false, // Use proxy with Google Translator page
    default: false,
    type: 'boolean',
  })
  .option('multi', {
    describe: false, // Use multi Tabs in place of single Tabs
    default: true,
    type: 'boolean',
  })
  .option('level', {
    describe: 'The logs level: info, warn, error',
    default: 'info',
  })
  .alias('v', 'version')
  .help('h')
  .alias('h', 'help').argv;

function handler(argv, handle) {
  const { src, level } = argv;
  log.setLevel(level);
  try {
    const stat = fs.lstatSync(src);
    if (stat.isFile(src)) {
      handle.file(argv);
    } else if (stat.isDirectory(src)) {
      handle.dir(argv);
    } else throw new Error(`Passed ${src} is unknown`);
  } catch (err) {
    log.error(err.message);
  }
}

function validatePath(argv, ext = '.vtt') {
  const { force, out } = argv;
  const src = path.resolve(argv.src); // absolute path
  let dest;
  // if we got '--out' folder '[dest]' are ignored
  if (out) {
    invariant(existsDirSync(out), `Provide "--out" path "${out}" is not a folder`);
    dest = path.resolve(out, path.basename(src, '.srt') + ext);
  } else if (argv.dest) {
    dest = path.resolve(argv.dest);
    invariant(!existsDirSync(dest), `Provide [dest] "${dest}" can't be a folder, use '--out'`);
  } else {
    dest = path.replaceExt(src, ext);
  }

  let skipped = false;

  if (existsSync(dest) && !force) {
    log.info(`SKIPPED! file: "${dest}", already exist, use '--force' for overwrite it`);
    skipped = true;
  }

  return { src, dest, skipped };
}

function convertFile(argv) {
  const { purge } = argv;
  const { src, dest, skipped } = validatePath(argv);

  if (skipped) return;

  convert(src, dest);
  log.warn(`CONVERTED file: ${dest}`);
  if (purge) {
    fs.unlinkSync(src);
    log.warn(`PURGED file: ${src}`);
  }
}

function convertFileVTT(argv) {
  const { purge } = argv;
  const { src, dest, skipped } = validatePath(argv, '.srt');

  if (skipped) return;

  convertVTT(src, dest);
  log.warn(`CONVERTED file: ${dest}`);
  if (purge) {
    fs.unlinkSync(src);
    log.warn(`PURGED file: ${src}`);
  }
}

function convertDir(argv_) {
  const { depth } = argv_;
  const argv = { ...argv_, out: '', dest: '' }; // 'out' and [dest] are ignored
  const src = path.resolve(argv_.src); // absolute path
  const dir = fs.readdirSync(src);
  for (const file of dir) {
    const fullPath = path.join(src, file);
    const isDirectory = fs.lstatSync(fullPath).isDirectory();
    const isSrt = fullPath.toLowerCase().endsWith('.srt');

    if (isDirectory && depth) {
      convertDir({ ...argv, src: fullPath });
    } else if (isSrt) {
      convertFile({ ...argv, src: fullPath });
    }
  }
}

function convertDirVTT(argv_) {
  const { depth } = argv_;
  const argv = { ...argv_, out: '', dest: '' }; // 'out' and [dest] are ignored
  const src = path.resolve(argv_.src); // absolute path
  const dir = fs.readdirSync(src);
  for (const file of dir) {
    const fullPath = path.join(src, file);
    const isDirectory = fs.lstatSync(fullPath).isDirectory();
    const isVtt = fullPath.toLowerCase().endsWith('.vtt');

    if (isDirectory && depth) {
      convertDirVTT({ ...argv, src: fullPath });
    } else if (isVtt) {
      convertFileVTT({ ...argv, src: fullPath });
    }
  }
}

async function translateFile(argv, translateFn) {
  const { purge, skip, slang, tlang } = argv;
  const { src, dest, skipped } = validatePath(argv, `.${tlang}.vtt`);

  if (skipped) return;

  // Avoid re-translate on folder recursion
  if (src.toLowerCase().endsWith(`.${tlang}.vtt`)) {
    return;
  }

  // Skip existing translation. Avoid re-translate file
  if (skip && existsFileSync(dest)) {
    log.info(`SKIPPED file: ${dest}`);
    return;
  }

  await translate(src, dest, slang, tlang, translateFn);
  // purge? on success
  log.warn(`TRANSLATED file: ${dest}`);
  if (purge) {
    fs.unlinkSync(argv.src); // remove file original
    log.warn(`PURGED file: ${argv.src}`);
  }
}

async function translateDir(argv_, translateFn) {
  const { depth } = argv_;
  const argv = { ...argv_, out: '', dest: '' }; // 'out' and [dest] are ignored
  const src = path.resolve(argv_.src); // absolute path

  const dir = fs.readdirSync(src);
  for (const file of dir) {
    const fullPath = path.join(src, file);
    const isDirectory = fs.lstatSync(fullPath).isDirectory();

    const isVtt = fullPath.toLowerCase().endsWith('.vtt');

    try {
      if (isDirectory && depth) {
        await translateDir({ ...argv, src: fullPath }, translateFn);
      } else if (isVtt) {
        await translateFile({ ...argv, src: fullPath }, translateFn);
      }
    } catch (e) {
      // continue
    }
  }
}

function convert(src, dest) {
  try {
    fs.createReadStream(src).pipe(srt2vtt()).pipe(fs.createWriteStream(dest));
  } catch (e) {
    log.error(e);
    throw e;
  }
}

function convertVTT(src, dest) {
  try {
    fs.createReadStream(src).pipe(vtt2srt()).pipe(fs.createWriteStream(dest));
  } catch (e) {
    log.error(e);
    throw e;
  }
}

// default lang 'source:EN target:ES'
async function translate(src, dest, slang = 'en', tlang = 'es', translateFn) {
  let parsed;
  try {
    const data = fs.readFileSync(src, 'utf8');
    //const parsed = webvtt.parse(data);
    parsed = webvtt.parse(data);
    const parsedText = parsed.cues.map((cue) => cue.text);

    // call translate function
    const response = await translateFn(parsedText, slang, tlang);

    for (let i = 0; i < parsedText.length; i++) {
      parsed.cues[i].text = response[i];
    }

    // write to translate VTT
    const compiled = webvtt.compile(parsed);
    fs.writeFileSync(dest, compiled);
  } catch (e) {
    const msg = `translating: ${src}`;
    log.error(msg);
    log.error(e);
    // console.dir(parsed, { maxArrayLength: null });
    throw e;
  }
}
